-- https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control
-- https://git-scm.com/downloads
-- If you already have Git installed, you can get the latest development version via Git itself
git clone https://github.com/git/git

git --version
git help config
git add -h
git config --list --show-origin
git config user.name
git config user.email
git config --global user.name "John Doe"
git config --global user.email johndoe@example.com
git config --global core.editor emacs
git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"
git config --global init.defaultBranch main

-- Showing Your Remotes
-- To see which remote servers you have configured
git remote
git remote -v
-- Adding Remote Repositories
-- To add a new remote Git repository as a shortname
git remote add pb https://github.com/paulboone/ticgit
git remote -v
-- Fetching and Pulling from Your Remotes 
git fetch pb
-- Pushing to Your Remotes
git push origin master
-- Inspecting a Remote
git remote show origin
-- Renaming and Removing Remotes
git remote rename pb paul
git remote
-- remove remote
git remote remove paul
git remote

-- Listing Your Tags
git tag
--  only in looking at the 1.8.5 series
git tag -l "v1.8.5*"
-- Creating Tags : lightweight and annotated
-- Annotated Tags
git tag -a v1.4 -m "my version 1.4"
-- You can see the tag data along with the commit
git show v1.4
-- Lightweight Tags
git tag v1.4-lw

-- Sharing Tags
git push origin v1.5
git push origin --tags
-- To delete a tag on your local repository
git tag -d v1.4-lw
-- to delete a tag from a remote server
git push origin :refs/tags/v1.4-lw
git push origin --delete <tagname>

-- Checking out Tags
git checkout v2.0.0

-- Branch Management
-- list of local branch
git branch
-- to see all branch including remote
git branch --all
-- to see the last commit on each branch
git branch -v
-- To see which branches are already merged into the branch you’re on, you can run 
git branch --merged
-- To see all the branches that contain work you haven’t yet merged in, you can run 
git branch --no-merged
-- to check merged status whithout checkout
git branch --no-merged master

-- create a new branch named "feature_x" and switch to it using
git checkout -b feature_x
-- switch back to master
git checkout master
-- to merge another branch into your active branch
git merge <branch>
-- push the branch to your remote repository
git push origin <branch>

-- to change branch name in local
git branch --move bad-branch-name corrected-branch-name
-- to change branch name in remote
git push --set-upstream origin corrected-branch-name
-- delete the branch locally
git branch -d feature_x
-- force branch delete when not fully merged
git branch -D feature_x
-- delete remote branch 
git push origin --delete branch-name

-- update your local repository to the newest commit
git pull

-- Git Aliases
git config --global alias.last 'log -1 HEAD'
-- to see last commit
git last

-- create a file named 'README.md' in windows
echo "# test" >> README.md
-- to mark them as merged with
git add <filename>
-- before merging changes, you can also preview them by using
git diff <source_branch> <target_branch>
-- to see what you’ve changed but not yet staged
git diff
-- If you want to see what you’ve staged that will go into your next commit  (--staged and --cached are synonyms)
git diff --staged
git diff --cached
-- add file
git add *
git add README.md
git commit -m "first commit"
-- Skipping the Staging Area during commit , use -a
git commit -a -m "Add new benchmarks"

-- Undoing Things
git commit --amend

-- Unstaging a Staged File
git add CONTRIBUTING.md
git status
git reset HEAD CONTRIBUTING.md
-- Unstaging a Staged File with git restore
git restore --staged CONTRIBUTING.md
-- Unmodifying a Modified File with git restore
git restore CONTRIBUTING.md
-- Unmodifying a Modified File
git checkout -- CONTRIBUTING.md

-- example -- end up with a single commit — the second commit replaces the results of the first
git commit -m 'Initial commit'
git add forgotten_file
git commit --amend

-- Removing Files
rm PROJECTS.md
git rm --cached README
-- removes all files that have the .log extension
git rm log/\*.log
-- emoves all files whose names end with a ~
git rm \*~

-- Moving Files 
git mv README.md README
-- same as
mv README.md README
git rm README.md
git add README

-- tagging
git tag 1.0.0 1b2e1d63ff

-- log
git log
-- to see particular branch log
git log testing
-- To show all of the branches, add --all to your git log command
git log --all
-- help
git log --help
-- To see only the commits of a certain author
git log --author=bob
-- To see a very compressed log where each commit is one line
git log --pretty=oneline
-- to see an ASCII art tree of all the branches
git log --graph --oneline --decorate --all
-- See only which files have changed
git log --name-status
-- pretty log display
git log -p -2
-- limiting Log Output
git log --since=2.weeks
-- to see particular range log
git log --pretty="%h - %s" --author='Junio C Hamano' --since="2008-10-01" \
   --before="2008-11-01" --no-merges -- t/

-- replace local changes : this replaces the changes in your working tree with the last content
git checkout -- <filename>
-- drop all your local changes and commits
git fetch origin
git reset --hard origin/master

-- Git Branching --------------------
git add README test.rb LICENSE
git commit -m 'Initial commit
-- Creating a New Branch
git branch testing
-- create a new branch and switch to it
 git checkout -b <newbranchname>
-- to see branch pointer pointing
git log --oneline --decorate
-- swtiching to branch
git checkout testing
-- Switch to an existing branch
git switch testing-branch
-- Create a new branch and switch to it: version 2.23
git switch -c new-branch
-- Return to your previously checked out branch
git switch -
-- create new fie and commit
echo "# test" >> README007.md
git commit -a -m "Make a change"

-- Basic Branching and Merging ----------------
-- Switched to a new branch "iss53"
git checkout -b iss53
-- shorthand of previous command
git branch iss53
git checkout iss53
-- create new file and commit
vim index.html
git commit -a -m 'Create new footer [issue 53]'

-- Switched to branch 'master'
git checkout master
-- create a new branch 
git checkout -b hotfix
-- Switched to a new branch 'hotfix'
vim index.html
git commit -a -m 'Fix broken email address'
-- checkout mas agin
git checkout master
-- marge hotfix into master
git merge hotfix
-- Deleted branch hotfix.
git branch -d hotfix

-- hotfix branch changes are not in the branch "iss53"
git checkout iss53
git merge master
-- 

-- Switched to branch  "iss53" again
git checkout iss53
-- create new file and commit
vim index.html
git commit -a -m 'Finish the new footer [issue 53]'
-- marge with master
git checkout master
-- Switched to branch 'master'
git merge iss53
-- Deleted branch iss53.
git branch -d iss53

-- ******************************************

-- To fix that you can remove remote origin and link it again. First, check the remote origin:
git remote -v
git remote remove origin
git remote add origin https://github.com/tahmilur/test.git
git pull --ff-only
git branch --set-upstream-to=origin/main
*****************************************************************************

git status
git status -s
git clone https://github.com/tahmilur/test.git

…or create a new repository on the command line

echo "# test" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/tahmilur/test.git
git push -u origin main

…or push an existing repository from the command line
git remote add origin https://github.com/tahmilur/test.git
git branch -M main
git push -u origin main
git pull
